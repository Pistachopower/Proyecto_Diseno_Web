https://orangetreesevilla.com/


Pasos
Necesito una pagina para mostrar los productos 
En base a la categoria seleccionada, filtrar los productos que estan en el store
    Me cojo los productos de la store
    Los guardo en una variable de componente 
    Y filtro sobre la variable componente
    Esa variable es la que voy a pintar en la pagina 

    Pasar la categoria mediante la store de productos o pasarlo como parametro mediante la ruta o url



Comando para arrancar servidor
npm run dev

Version usada: 
La versión de Vue.js que estás usando es 3.5.13.







Header antiguo:
    <script setup>
</script>



<style scoped>
    header {
        background-color: #333;
        color: white;
        text-align: center;
        padding: 1rem;
    }
</style>


Logica
Creas la view
Luego el componente 
URL


Logica del buscador y la muestra de resultados
Resumen del flujo:
1. **`SearchBar`**:
   - Filtra los productos según el texto ingresado.
   - Guarda los productos filtrados en el store (`productosStore.setProductos`).

2. **Store de Pinia (`buscar.js`)**:
   - Guarda los productos filtrados en el estado `productos`.

3. **`ProductsView`**:
   - Obtiene los productos filtrados del store (`productos`).
   - Pasa los productos como una prop (`results`) al componente `SearchResults`.

4. **`SearchResults`**:
   - Recibe los productos filtrados como una prop (`results`).
   - Los muestra en el template.

---

Conexión clave:
El store de Pinia (`buscar.js`) actúa como un puente entre `SearchBar` (que filtra los datos) y `SearchResults` (que muestra los datos). Esto permite que los datos sean compartidos entre componentes sin necesidad de comunicación directa entre ellos.


Peticiones
Detalle del producto y dentro algunos relacionados 

COMPUTED PROPERTY (PARA LA SELECCION QUE CAMBIA EN EL SELECT )

Icono del carrito 
Detalle de las compras
Suma total  



Glosario

Pinia (libreria para comunicarse entre componentes): libreria para manejar estados (datos que quieres guardar y compartir entre componentes)

Props: datos que un componente hijo recibe de su padre. Ej: ProductsViews como padre le pasa a SearchResults los productos filtrados. 

Store
State: donde guardas los datos. Ej: lista de productos

Actions: funciones para cambiar esos datos. Ej: agregarm limpiar un carrito

Getters: computa o filtra datos de forma automatica. Ej: contar los productos en el carrito


