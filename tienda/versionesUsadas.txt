https://orangetreesevilla.com/


Pasos
Necesito una pagina para mostrar los productos 
En base a la categoria seleccionada, filtrar los productos que estan en el store
    Me cojo los productos de la store
    Los guardo en una variable de componente 
    Y filtro sobre la variable componente
    Esa variable es la que voy a pintar en la pagina 

    Pasar la categoria mediante la store de productos o pasarlo como parametro mediante la ruta o url



Comando para arrancar servidor
npm run dev


Instalar 
npm install bootstrap

Version usada: 
La versión de Vue.js que estás usando es 3.5.13.







Header antiguo:
    <script setup>
</script>



<style scoped>
    header {
        background-color: #333;
        color: white;
        text-align: center;
        padding: 1rem;
    }
</style>


Logica
Creas la view
Luego el componente 
URL


Logica del buscador y la muestra de resultados
Resumen del flujo:
1. **`SearchBar`**:
   - Filtra los productos según el texto ingresado.
   - Guarda los productos filtrados en el store (`productosStore.setProductos`).

2. **Store de Pinia (`buscar.js`)**:
   - Guarda los productos filtrados en el estado `productos`.

3. **`ProductsView`**:
   - Obtiene los productos filtrados del store (`productos`).
   - Pasa los productos como una prop (`results`) al componente `SearchResults`.

4. **`SearchResults`**:
   - Recibe los productos filtrados como una prop (`results`).
   - Los muestra en el template.

---

Conexión clave:
El store de Pinia (`buscar.js`) actúa como un puente entre `SearchBar` (que filtra los datos) y `SearchResults` (que muestra los datos). Esto permite que los datos sean compartidos entre componentes sin necesidad de comunicación directa entre ellos.






Glosario

Pinia (libreria para comunicarse entre componentes): libreria para manejar estados (datos que quieres guardar y compartir entre componentes)

Props: datos que un componente hijo recibe de su padre. Ej: ProductsViews como padre le pasa a SearchResults los productos filtrados. 

Store
State: donde guardas los datos. Ej: lista de productos

Actions: funciones para cambiar esos datos. Ej: agregarm limpiar un carrito

Getters: computa o filtra datos de forma automatica. Ej: contar los productos en el carrito

Computed: es reactivo, es decir que puede hacer cambios de una estructura de datos cada
vez que se cambia algo. 

Ref(): es una función de Vue que crea una variable reactiva.
Una variable reactiva es aquella que Vue vigila automáticamente, y cuando 
su valor cambia, Vue actualiza el contenido del HTML donde se esté usando

onMounted() ejecuta un bloque de código cuando el componente ya se mostró en pantalla, 
ideal para inicializar datos o hacer tareas al arrancar. 

Two-way Binding: Si tú escribes algo → cambia la variable en el código. Si el código cambia la variable → se actualiza lo que ves en pantalla.

Requisitos: 
Buenos días Nelson,
te adjunto los comentarios del proyecto:

    En inicio enlazar los productos del carrusel con el detalle del producto. (X)

    En la página de productos, añadir filtros por categorías y que el buscador busque a medida que se escribe. (POR PROBAR)
    Las categorías debes cogerlas dinámicamente desde el json de productos.

    Al añadir un producto al carro, añadir algún tipo de animacioń o feedback para que el usuario sepa que se ha añadido.
    En el icono del carro puedes usar un Bagde de Bootstrap (https://getbootstrap.com/docs/5.3/components/badge/) (EN CONSTRUCCION)

    Mejorar la visualización cuando se muestra un producto y añadir un botón para añadir al carro, que en la vista de detalle no está.

    En la página del carro, listar los productos y hacer la suma total del pedido. Puedes ver un ejemplo en la imagen adjunta. (EN CONSTRUCCION)

    No hace falta que añadas los botones de Añadir/quitar productos.

    Importaante
    Recuperar el boton del carrito
    Probar el Badge y el toast 