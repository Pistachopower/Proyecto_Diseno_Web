Boton que filtra por categorias
¿Qué queremos hacer?
Queremos que:

Las categorías de los productos se obtengan dinámicamente desde el JSON de productos.
Los botones de categorías se generen automáticamente según las categorías disponibles.
Los productos se filtren por categoría cuando el usuario haga clic en un botón.

¿Cómo lo hicimos?
Paso 1: Obtener las categorías dinámicamente
En el store de productos (products.js), usamos un método para extraer las categorías únicas de los productos.
Esto se hace con el siguiente código:

this.categories = [...new Set(this.allProduct.map(product => product.category))];

¿Qué hace este código?
this.allProduct.map(product => product.category) toma todas las categorías de los productos.
new Set(...) elimina las categorías duplicadas.
[...new Set(...)] convierte el resultado en un array.

Paso 2: Crear botones para las categorías

En ProductsView.vue, usamos un v-for para recorrer las categorías y crear un botón para cada una:

<button
  v-for="category in categories"
  :key="category"
  class="btn btn-outline-primary"
  :class="{ active: selectedCategory === category }"
  @click="filterByCategory(category)"
>
  {{ category }}
</button>

¿Qué hace este código?
v-for="category in categories" recorre todas las categorías y crea un botón para cada una.
@click="filterByCategory(category)" llama a la función filterByCategory cuando haces clic en un botón.
:class="{ active: selectedCategory === category }" resalta el botón de la categoría seleccionada.

Paso 3: Filtrar los productos
Creamos una función llamada filterByCategory que filtra los productos según la categoría seleccionada:

const filterByCategory = (category) => {
  selectedCategory.value = category; // Actualiza la categoría seleccionada
};

¿Qué hace este código?
Guarda la categoría seleccionada en la variable selectedCategory.
Esto recalcula automáticamente los productos filtrados.

Paso 4: Mostrar los productos filtrados
En el template, usamos filteredProducts para mostrar los productos:

<div v-for="producto in filteredProducts" :key="producto.id" class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
  <div class="card h-100">
    <img :src="producto.image" class="card-img-top" alt="Producto" style="object-fit: cover; height: 200px;">
    <div class="card-body d-flex flex-column">
      <router-link :to="`/product/${producto.id}`">
        <h5 class="card-title">{{ producto.title }}</h5>
      </router-link>
      <p class="card-text mb-2">${{ producto.price }}</p>
    </div>
  </div>
</div>

¿Qué hace este código?
v-for="producto in filteredProducts" recorre los productos filtrados y los muestra en tarjetas.
Cada tarjeta tiene el título, la imagen y el precio del producto.

¿Cómo funciona todo junto?
Al cargar la página:

Se obtienen los productos y las categorías desde el store.
filteredProducts contiene todos los productos al inicio.
Cuando haces clic en una categoría:

La función filterByCategory actualiza filteredProducts con los productos de esa categoría.
Solo se muestran los productos filtrados.
Cuando haces clic en "Todas":

filteredProducts vuelve a contener todos los productos.

Resultado esperado
En la página de productos:

Aparecen botones con las categorías dinámicamente generadas desde los productos.
También hay un botón "Todas" para mostrar todos los productos.
Al hacer clic en una categoría:

Solo se muestran los productos que pertenecen a esa categoría.
Al hacer clic en "Todas":

Se muestran todos los productos disponibles.


Buscador en tiempo real
Queremos que:

El usuario pueda buscar productos escribiendo en un campo de texto.
Los resultados se actualicen automáticamente en tiempo real mientras el usuario escribe.
El buscador funcione junto con los filtros por categorías, mostrando solo los productos que coincidan con ambos criterios (texto y categoría).

¿Cómo lo hicimos?
Paso 1: Crear el componente SearchBar.vue
El componente SearchBar.vue es un campo de entrada que permite al usuario escribir el texto de búsqueda. Este texto se envía al componente padre cada vez que cambia.

<script setup>
import { ref, watch } from 'vue';

const textoBusqueda = ref(''); // Variable para almacenar la consulta de búsqueda

// Emitir el texto de búsqueda al componente padre
const emit = defineEmits(['update:search']);
watch(textoBusqueda, (newValue) => {
  emit('update:search', newValue); // Emitimos el texto de búsqueda al padre
});
</script>

<template>
  <form class="d-flex my-4">
    <input
      v-model="textoBusqueda"
      type="text"
      class="form-control me-2"
      placeholder="Buscar productos..."
      aria-label="Buscar"
    />
    <button type="button" class="btn btn-primary">
      <i class="bi bi-search"></i> Buscar
    </button>
  </form>
</template>

¿Qué hace este código?
v-model="textoBusqueda" enlaza el texto ingresado por el usuario con la variable textoBusqueda.
Cada vez que el texto cambia, el watch detecta el cambio y emite el nuevo valor al componente padre usando emit('update:search', newValue).

Paso 2: Recibir el texto de búsqueda en ProductsView.vue
En el componente ProductsView.vue, recibimos el texto de búsqueda desde SearchBar.vue y lo usamos para filtrar los productos.

<script setup>
import SearchBar from '@/components/SearchBar.vue';
import { useProductsStore } from '@/stores/products';
import { storeToRefs } from 'pinia';
import { ref, onMounted, computed } from 'vue';

// Hacemos el enlace con el store de productos
const productsStore = useProductsStore();
const { allProduct, categories } = storeToRefs(productsStore);

// Variables reactivas para el texto de búsqueda y la categoría seleccionada
const textoBusqueda = ref('');
const selectedCategory = ref(''); // '' significa "todas las categorías"

// Variable reactiva para los productos filtrados
const filteredProducts = computed(() => {
  // Filtrar por categoría
  let productosFiltrados = selectedCategory.value
    ? allProduct.value.filter(product => product.category === selectedCategory.value)
    : allProduct.value;

  // Filtrar por texto de búsqueda
  if (textoBusqueda.value.trim()) {
    productosFiltrados = productosFiltrados.filter(product =>
      product.title.toLowerCase().includes(textoBusqueda.value.toLowerCase())
    );
  }

  return productosFiltrados;
});

// Cargar los productos y categorías al montar el componente
onMounted(async () => {
  await productsStore.fetchProducts(); // Carga los productos desde la API
});

// Función para filtrar productos por categoría
const filterByCategory = (category) => {
  selectedCategory.value = category; // Actualiza la categoría seleccionada
};
</script>

<template>
  <div>
    <!-- Barra de búsqueda -->
    <SearchBar v-model:search="textoBusqueda" />

    <!-- Botones de categorías -->
    <div class="container my-4">
      <div class="d-flex flex-wrap gap-2 mb-4">
        <button
          v-for="category in categories"
          :key="category"
          class="btn btn-outline-primary"
          :class="{ active: selectedCategory === category }"
          @click="filterByCategory(category)"
        >
          {{ category }}
        </button>
        <button
          class="btn btn-outline-secondary"
          :class="{ active: selectedCategory === '' }"
          @click="filterByCategory('')"
        >
          Todas
        </button>
      </div>

      <!-- Mostrar productos filtrados -->
      <div class="row">
        <div
          v-for="producto in filteredProducts"
          :key="producto.id"
          class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4"
        >
          <div class="card h-100">
            <img
              :src="producto.image"
              class="card-img-top"
              alt="Producto"
              style="object-fit: cover; height: 200px;"
            />
            <div class="card-body d-flex flex-column">
              <router-link :to="`/product/${producto.id}`">
                <h5 class="card-title">{{ producto.title }}</h5>
              </router-link>
              <p class="card-text mb-2">${{ producto.price }}</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

¿Qué hace este código?
textoBusqueda almacena el texto ingresado en el buscador.
filteredProducts combina los filtros de texto y categoría:
Si hay texto en el buscador, filtra los productos que coincidan con el texto.
Si hay una categoría seleccionada, filtra los productos que pertenezcan a esa categoría.

Paso 3: Mostrar los productos filtrados
En el template de ProductsView.vue, usamos filteredProducts para mostrar solo los productos que coincidan con los filtros.

<div v-for="producto in filteredProducts" :key="producto.id" class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
  <div class="card h-100">
    <img :src="producto.image" class="card-img-top" alt="Producto" style="object-fit: cover; height: 200px;">
    <div class="card-body d-flex flex-column">
      <router-link :to="`/product/${producto.id}`">
        <h5 class="card-title">{{ producto.title }}</h5>
      </router-link>
      <p class="card-text mb-2">${{ producto.price }}</p>
    </div>
  </div>
</div>

¿Qué hace este código?
v-for="producto in filteredProducts" recorre los productos filtrados y los muestra en tarjetas.
Cada tarjeta tiene el título, la imagen y el precio del producto.

¿Cómo funciona todo junto?
El usuario escribe en el buscador:

El texto ingresado se guarda en textoBusqueda gracias a v-model.
Cada vez que el texto cambia, filteredProducts se recalcula automáticamente.
El usuario selecciona una categoría:

La categoría seleccionada se guarda en selectedCategory.
filteredProducts se recalcula automáticamente para combinar los filtros de texto y categoría.
Los productos se muestran filtrados:

Solo se muestran los productos que coincidan con ambos filtros (texto y categoría).

Resultado esperado
Cuando el usuario escribe en el buscador:

Los productos se filtran automáticamente en tiempo real.
Si hay una categoría seleccionada, solo se filtran los productos de esa categoría.
Cuando el usuario selecciona una categoría:

Solo se muestran los productos de esa categoría.
Si hay texto en el buscador, los productos también se filtran por el texto ingresado.
Cuando el usuario hace clic en "Todas":

Se muestran todos los productos que coincidan con el texto del buscador.
