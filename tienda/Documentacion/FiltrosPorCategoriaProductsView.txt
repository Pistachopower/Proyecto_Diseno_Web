¿Qué queremos hacer?
Queremos que:

Las categorías de los productos se obtengan dinámicamente desde el JSON de productos.
Los botones de categorías se generen automáticamente según las categorías disponibles.
Los productos se filtren por categoría cuando el usuario haga clic en un botón.

¿Cómo lo hicimos?
Paso 1: Obtener las categorías dinámicamente
En el store de productos (products.js), usamos un método para extraer las categorías únicas de los productos.
Esto se hace con el siguiente código:

this.categories = [...new Set(this.allProduct.map(product => product.category))];

¿Qué hace este código?
this.allProduct.map(product => product.category) toma todas las categorías de los productos.
new Set(...) elimina las categorías duplicadas.
[...new Set(...)] convierte el resultado en un array.

Paso 2: Crear botones para las categorías

En ProductsView.vue, usamos un v-for para recorrer las categorías y crear un botón para cada una:

<button
  v-for="category in categories"
  :key="category"
  class="btn btn-outline-primary"
  :class="{ active: selectedCategory === category }"
  @click="filterByCategory(category)"
>
  {{ category }}
</button>

¿Qué hace este código?
v-for="category in categories" recorre todas las categorías y crea un botón para cada una.
@click="filterByCategory(category)" llama a la función filterByCategory cuando haces clic en un botón.
:class="{ active: selectedCategory === category }" resalta el botón de la categoría seleccionada.

Paso 3: Filtrar los productos
Creamos una función llamada filterByCategory que filtra los productos según la categoría seleccionada:

const filterByCategory = (category) => {
  selectedCategory.value = category; // Actualiza la categoría seleccionada
};

¿Qué hace este código?
Guarda la categoría seleccionada en la variable selectedCategory.
Esto recalcula automáticamente los productos filtrados.

Paso 4: Mostrar los productos filtrados
En el template, usamos filteredProducts para mostrar los productos:

<div v-for="producto in filteredProducts" :key="producto.id" class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
  <div class="card h-100">
    <img :src="producto.image" class="card-img-top" alt="Producto" style="object-fit: cover; height: 200px;">
    <div class="card-body d-flex flex-column">
      <router-link :to="`/product/${producto.id}`">
        <h5 class="card-title">{{ producto.title }}</h5>
      </router-link>
      <p class="card-text mb-2">${{ producto.price }}</p>
    </div>
  </div>
</div>

¿Qué hace este código?
v-for="producto in filteredProducts" recorre los productos filtrados y los muestra en tarjetas.
Cada tarjeta tiene el título, la imagen y el precio del producto.

¿Cómo funciona todo junto?
Al cargar la página:

Se obtienen los productos y las categorías desde el store.
filteredProducts contiene todos los productos al inicio.
Cuando haces clic en una categoría:

La función filterByCategory actualiza filteredProducts con los productos de esa categoría.
Solo se muestran los productos filtrados.
Cuando haces clic en "Todas":

filteredProducts vuelve a contener todos los productos.

Resultado esperado
En la página de productos:

Aparecen botones con las categorías dinámicamente generadas desde los productos.
También hay un botón "Todas" para mostrar todos los productos.
Al hacer clic en una categoría:

Solo se muestran los productos que pertenecen a esa categoría.
Al hacer clic en "Todas":

Se muestran todos los productos disponibles.