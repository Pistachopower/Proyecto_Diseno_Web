Queremos que en la página del carrito:

Se muestren todos los productos que el usuario ha añadido al carrito.
Se calcule y muestre el total del pedido (la suma de los precios de todos los productos).

¿Qué vamos a hacer?
Listar los productos del carrito:

Mostraremos los productos que están guardados en el carrito.
Cada producto tendrá su nombre, precio e imagen.
Calcular el total del pedido:

Sumaremos los precios de todos los productos en el carrito.
Mostraremos el total en la parte inferior de la página.

 Implementación
 Paso 1: Modificamos el archivo cartView.vue
Actualizamos el archivo cartView.vue para listar los productos y calcular el total.

<script setup>
import { useCartStore } from '@/stores/cart';
import { storeToRefs } from 'pinia';
import { computed } from 'vue';

// Hacemos el enlace con el store del carrito
const cartStore = useCartStore();
const { cartItems } = storeToRefs(cartStore);

// Calculamos el total del pedido
const totalPedido = computed(() =>
  cartItems.value.reduce((total, item) => total + item.price, 0)
);
</script>

<template>
  <div class="container my-5">
    <h1>Carrito de Compras</h1>

    <!-- Mostrar productos del carrito -->
    <div v-if="cartItems.length > 0">
      <div class="row">
        <div
          v-for="item in cartItems"
          :key="item.id"
          class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4"
        >
          <div class="card h-100">
            <img
              :src="item.image"
              class="card-img-top"
              alt="Producto"
              style="object-fit: cover; height: 200px;"
            />
            <div class="card-body d-flex flex-column">
              <h5 class="card-title">{{ item.title }}</h5>
              <p class="card-text mb-2">Precio: ${{ item.price }}</p>
              <button
                class="btn btn-danger mt-auto"
                @click="cartStore.removeFromCart(item.id)"
              >
                Eliminar
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Mostrar el total del pedido -->
      <div class="mt-4 text-end">
        <h4>Total del Pedido: ${{ totalPedido }}</h4>
      </div>
    </div>

    <!-- Mensaje si el carrito está vacío -->
    <div v-else>
      <p class="text-muted">El carrito está vacío.</p>
    </div>
  </div>
</template>

<style scoped>
.card-img-top {
  object-fit: cover;
  height: 200px;
}
</style>

 Explicación del código
Listamos los productos del carrito:

Usamos v-for para recorrer los productos en el carrito (cartItems) y mostrar cada uno en una tarjeta.
Cada tarjeta muestra:
La imagen del producto (item.image).
El nombre del producto (item.title).
El precio del producto (item.price).
Un botón para eliminar el producto del carrito.
Calcular el total del pedido:

Usamos computed para calcular el total sumando los precios de todos los productos en el carrito:

const totalPedido = computed(() =>
  cartItems.value.reduce((total, item) => total + item.price, 0)
);

reduce recorre todos los productos y suma sus precios.
Mostrar el total del pedido:

Mostramos el total calculado (totalPedido) en la parte inferior de la página.
Mensaje si el carrito está vacío:

Si no hay productos en el carrito (cartItems.length === 0), mostramos un mensaje que dice: "El carrito está vacío."

Resultado esperado
Cuando el carrito tiene productos:

Se muestran las tarjetas con los productos añadidos al carrito.
Cada tarjeta muestra la imagen, el nombre, el precio y un botón para eliminar el producto.
En la parte inferior, se muestra el total del pedido.
Cuando el carrito está vacío:

Se muestra un mensaje que dice: "El carrito está vacío."

¿Por qué funciona?
Reactividad de Vue:

Cuando se añade o elimina un producto del carrito, el estado (cartItems) se actualiza automáticamente.
Esto hace que la lista de productos y el total del pedido se actualicen en tiempo real.
Uso de computed:

computed recalcula el total del pedido cada vez que cambia la lista de productos en el carrito.
Pinia para manejar el estado:

Usamos el store del carrito (cart.js) para guardar y gestionar los productos del carrito.
